/*
 * Copyright Â© 2019 The GWT Project Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.gwtproject.dom.client;

import elemental2.dom.Event;
import elemental2.dom.MouseEvent;
import elemental2.dom.TouchEvent;
import elemental2.dom.WheelEvent;
import jsinterop.annotations.JsOverlay;
import jsinterop.annotations.JsPackage;
import jsinterop.annotations.JsProperty;
import jsinterop.annotations.JsType;
import jsinterop.base.Any;
import jsinterop.base.Js;
import jsinterop.base.JsPropertyMap;
import org.gwtproject.core.client.JavaScriptObject;
import org.gwtproject.core.client.JsArray;

/** The native dom event. */
@JsType(isNative = true, name = "Object", namespace = JsPackage.GLOBAL)
public class NativeEvent extends JavaScriptObject {

  /** The left mouse button. */
  @JsOverlay public static final int BUTTON_LEFT = 1;

  /** The middle mouse button. */
  @JsOverlay public static final int BUTTON_MIDDLE = 4;

  /** The right mouse button. */
  @JsOverlay public static final int BUTTON_RIGHT = 2;

  /** Required constructor for GWT compiler to function. */
  protected NativeEvent() {}

  /**
   * Gets whether the ALT key was depressed when the given event occurred.
   *
   * @return <code>true</code> if ALT was depressed when the event occurred
   */
  @JsOverlay
  public final boolean getAltKey() {
    return Js.isTruthy((Js.<JsPropertyMap<Any>>uncheckedCast(this).get("altKey")));
  }

  /**
   * Gets the mouse buttons that were depressed when the given event occurred.
   *
   * @return a bit-field, defined by {@link NativeEvent#BUTTON_LEFT}, {@link
   *     NativeEvent#BUTTON_MIDDLE}, and {@link NativeEvent#BUTTON_RIGHT}
   */
  @JsOverlay
  public final int getButton() {
    // All modern browsers return 0, 1, and 2 for left, middle, and right,
    // respectively. Because eventGetButton() is expected to return the IE
    // bitfield norms of 1, 4, and 2, we translate them here.
    int button = Js.<JsPropertyMap<Any>>uncheckedCast(this).get("button").asInt();
    if (button == 1) {
      return 4;
    } else if (button == 2) {
      return 2;
    }
    return 1;
  }

  /**
   * Get an array of touches which have changed since the last touch event.
   *
   * @return array of touches which have changed since the last touch event
   */
  @JsOverlay
  public final JsArray<Touch> getChangedTouches() {
    return Js.uncheckedCast(Js.<TouchEvent>uncheckedCast(this).changedTouches);
  }

  /**
   * Gets the Unicode codepoint of the character generated by this key event.
   *
   * @return the Unicode codepoint.
   */
  @JsOverlay
  @Deprecated
  public final int getCharCode() {
    return Js.coerceToInt(Js.<JsPropertyMap<Any>>uncheckedCast(this).get("charCode"));
  }

  /**
   * Gets the mouse x-position within the browser window's client area.
   *
   * @return the mouse x-position
   */
  @JsOverlay
  public final int getClientX() {
    return Js.coerceToInt(Js.<MouseEvent>uncheckedCast(this).clientX);
  }

  /**
   * Gets the mouse y-position within the browser window's client area.
   *
   * @return the mouse y-position
   */
  @JsOverlay
  public final int getClientY() {
    return Js.coerceToInt(Js.<MouseEvent>uncheckedCast(this).clientY);
  }

  /**
   * Gets whether the CTRL key was depressed when the given event occurred.
   *
   * @return <code>true</code> if CTRL was depressed when the event occurred
   */
  @JsOverlay
  public final boolean getCtrlKey() {
    return Js.isTruthy((Js.<JsPropertyMap<Any>>uncheckedCast(this).get("ctrlKey")));
  }

  /**
   * Gets the current target element of this event. This is the element whose listener fired last,
   * not the element which fired the event initially.
   *
   * @return the event's current target element
   */
  @JsOverlay
  public final EventTarget getCurrentEventTarget() {
    return Js.uncheckedCast(Js.<Event>uncheckedCast(this).currentTarget);
  }

  /**
   * Get the {@link DataTransfer} associated with the current drag event.
   *
   * @return the {@link DataTransfer} object, or null if not a drag event
   */
  @JsOverlay
  public final DataTransfer getDataTransfer() {
    return Js.isTruthy(this.dataTransfer) ? this.dataTransfer : null;
  }

  @JsProperty private DataTransfer dataTransfer;

  /**
   * Returns the element that was the actual target of the given event.
   *
   * @return the target element
   */
  @JsOverlay
  public final EventTarget getEventTarget() {
    return (EventTarget) Js.<Event>uncheckedCast(this).target;
  }

  /**
   * Gets the key code (code associated with the physical key) associated with this event.
   *
   * @return the key code
   * @see "org.gwtproject.event.dom.client.KeyCodes in the gwt-event-dom project"
   */
  @JsOverlay
  @Deprecated
  public final int getKeyCode() {
    return Js.coerceToInt(Js.<JsPropertyMap<Any>>uncheckedCast(this).get("keyCode"));
  }

  /**
   * Gets whether the META key was depressed when the given event occurred.
   *
   * @return <code>true</code> if META was depressed when the event occurred
   */
  @JsOverlay
  public final boolean getMetaKey() {
    return Js.isTruthy((Js.<JsPropertyMap<Any>>uncheckedCast(this).get("metaKey")));
  }

  /**
   * Gets the velocity of the mouse wheel associated with the event along the Y axis.
   *
   * <p>The velocity of the event is an artificial measurement for relative comparisons of wheel
   * activity. It is affected by some non-browser factors, including choice of input hardware and
   * mouse acceleration settings. The sign of the velocity measurement agrees with the screen
   * coordinate system; negative values are towards the origin and positive values are away from the
   * origin. Standard scrolling speed is approximately ten units per event.
   *
   * @return The velocity of the mouse wheel.
   */
  @JsOverlay
  public final int getMouseWheelVelocityY() {
    return Js.coerceToInt(Js.<WheelEvent>uncheckedCast(this).deltaY);
  }

  /**
   * Gets the related target for this event.
   *
   * @return the related target
   */
  @JsOverlay
  public final EventTarget getRelatedEventTarget() {
    return Js.uncheckedCast(Js.<MouseEvent>uncheckedCast(this).relatedTarget);
  }

  /**
   * Get the rotation in degrees, with positive values indicating clockwise rotation.
   *
   * @return the rotation in degrees since the gesture started
   */
  @JsOverlay
  @Deprecated
  public final double getRotation() {
    return Js.<JsPropertyMap<Any>>uncheckedCast(this).get("rotation").asDouble();
  }

  /**
   * Get the amount scaled since the gesture started, with 1.0 representing no scaling.
   *
   * @return the amount scaled since the gesture started
   */
  @JsOverlay
  @Deprecated
  public final double getScale() {
    return Js.<JsPropertyMap<Any>>uncheckedCast(this).get("scale").asDouble();
  }

  /**
   * Gets the mouse x-position on the user's display.
   *
   * @return the mouse x-position
   */
  @JsOverlay
  public final int getScreenX() {
    return Js.coerceToInt(Js.<MouseEvent>uncheckedCast(this).screenX);
  }

  /**
   * Gets the mouse y-position on the user's display.
   *
   * @return the mouse y-position
   */
  @JsOverlay
  public final int getScreenY() {
    return Js.coerceToInt(Js.<MouseEvent>uncheckedCast(this).screenY);
  }

  /**
   * Gets whether the shift key was depressed when the given event occurred.
   *
   * @return <code>true</code> if shift was depressed when the event occurred
   */
  @JsOverlay
  public final boolean getShiftKey() {
    return Js.isTruthy((Js.<JsPropertyMap<Any>>uncheckedCast(this).get("shiftKey")));
  }

  /**
   * Gets a string representation of this event.
   *
   * <p>We do not override {@link #toString()} because it is final in {@link JavaScriptObject }.
   *
   * @return the string representation of this event
   */
  @JsOverlay
  public final String getString() {
    return Js.<Event>uncheckedCast(this).toString();
  }

  /**
   * Get an array of touches which have changed since the last touch event.
   *
   * @return array of touches which have changed since the last touch event
   */
  @JsOverlay
  public final JsArray<Touch> getTargetTouches() {
    return Js.uncheckedCast(Js.<TouchEvent>uncheckedCast(this).targetTouches);
  }

  /**
   * Get an array of touches which have changed since the last touch event.
   *
   * @return array of touches which have changed since the last touch event
   */
  @JsOverlay
  public final JsArray<Touch> getTouches() {
    return Js.uncheckedCast(Js.<TouchEvent>uncheckedCast(this).touches);
  }

  /**
   * Gets the enumerated type of this event.
   *
   * @return the event's enumerated type
   */
  @JsOverlay
  public final String getType() {
    return Js.<Event>uncheckedCast(this).type;
  }

  /** Prevents the browser from taking its default action for the given event. */
  @JsOverlay
  public final void preventDefault() {
    Js.<Event>uncheckedCast(this).preventDefault();
  }

  /** Stops the event from being propagated to parent elements. */
  @JsOverlay
  public final void stopPropagation() {
    Js.<Event>uncheckedCast(this).stopPropagation();
  }
}
